q()
library(factoextra)
library(cluster)
library(fpc)
library(NbClust)
library(clValid)
library(magrittr)
library(clustertend)
install.packages("/home/kleber/Downloads/fpc_2.1-10.tar.gz", repso=NULL)
install.packages("/home/kleber/Downloads/fpc_2.1-11.1.tar.gz", repso=NULL)
install.packages("https://cran.r-project.org/src/contrib/Archive/fpc/fpc_2.2-1.tar.gz", repso=NULL)
install.packages("https://cran.r-project.org/src/contrib/Archive/fpc/fpc_2.2-8.tar.gz", repso=NULL)
install.packages("/home/kleber/Downloads/fpc_2.2-8.tar.gz", repso=NULL)
library(fpc)
install.packages("fpc")
library(fpc)
library(factoextra)
library(cluster)
library(fpc)
library(NbClust)
library(clValid)
library(magrittr)
library(clustertend)
install.packages("clustertend")
library(factoextra)
library(cluster)
library(fpc)
library(NbClust)
library(clValid)
library(magrittr)
library(clustertend)
str(carros)
setwd("/home/kleber/ML/BussinesAnalytics/cap02/R")
getwd()
carros <- read.csv("dados/carros.csv", stringsAsFactors = FALSE)
str(carros)
carros$Ano <- as.character(carros$Ano)
names(carros) <-c('Ano', 'Modelo', 'Preco', 'Kilometragem', 'Cor', 'Transmissao')
carros$Ano <- as.character(carros$Ano)
str(carros)
table(carros$Ano)
table(carros$Modelo)
table(carros$Cor)
model_table <- table(carros$Modelo)
prop.table(model_table)
color_table <- table(carros$Cor)
color_pct <- prop.table(color_table) * 100
round(color_pct, digits = 1
)
#Resumo gráfico e entre as variáveis categóricas
library(ggplot2)
gc()
help(Binomial)
?dbinom
dbinom(6, size = 12, prob = 0.2)
dbinom(6, size = 12, prob = 0.2) * 100
x <- dbinom(6, size = 12, prob = 0.2)
barplot(x, names.arg = 0:12, space = 0 )
x <- dbinom(6, size = 12, prob = 0.2)
barplot(x, names.arg = 0:12, space = 0)
x <- dbinom(0:12, size = 12, prob = 0.2)
barplot(x, names.arg = 0:12, space = 0)
pbinom(5, size = 12, prob = 0.2)
x <- pbinom(0:12, size = 12, prob = 0.2)
barplot(x, names.arg = 0:12, space = 0)
x
#Exemplo 2
?dpois
dpois(x = 2, lambda = 3) + dpois(x = 3, lambda = 3) + dpois(x = 4, lambda = 4)
dpois(x = 4, lambda = 4)
(x = 2, lambda = 3)
dpois(x = 3, lambda = 3)
dpois(x = 2, lambda = 3) + dpois(x = 3, lambda = 3) + dpois(x = 4, lambda = 3)
dpois(x = 3, lambda = 3
dpois(x = 3, lambda = 3)
dpois(x = 3, lambda = 3)
dpois(x = 2, lambda = 3)
dpois(x = 0, lambda = 3)
dpois(x = 1, lambda = 3)
dpois(x = 2, lambda = 3)
dpois(x = 3, lambda = 3)
dpois(x = 4, lambda = 3)
dpois(x = 5, lambda = 3)
dpois(x = 10, lambda = 3)
ppois(q = 4, lambda = 3)
ppois(q = 4, lambda = 3, lower.tail = TRUE)
ppois(q = 4, lambda = 3, lower.tail = FALSE)
ppois(q = 4, lambda = 3, lower.tail = FALSE) - ppois(q = 1, lambda = 3, lower.tail = FALSE)
ppois(q = 4, lambda = 3, lower.tail = TRUE) - ppois(q = 1, lambda = 3, lower.tail = TRUE)
ppois(q = 4, lambda = 3, lower.tail = TRUE)
ppois(q = 4, lambda = 3)
ppois(q = 4, lambda = 3, lower.tail = TRUE) - ppois(q = 1, lambda = 3, lower.tail = TRUE)
x <- ppois(q = 1:10, lambda = 3, lower.tail = TRUE)
barplot(x, names.arg = 0:10, space = 0)
x <- ppois(q = 0:10, lambda = 3, lower.tail = TRUE)
barplot(x, names.arg = 0:10, space = 0)
options(scipen = 999, digits = 2)
eventos <- 1:10
probs <- dpois(x = evendos, lambda = 3)
prob_acumulada <- ppois(q = eventos, lambda = 3)
df
df <- data.frame(eventos, probs, prob_acumulada)
df <- data.frame(eventos, probs, prob_acumulada)
probs <- dpois(x = eventos, lambda = 3)
prob_acumulada <- ppois(q = eventos, lambda = 3)
df <- data.frame(eventos, probs, prob_acumulada)
df
prob_acumulada <- ppois(q = eventos, lambda = 3, lower.tail = TRUE)
df <- data.frame(eventos, probs, prob_acumulada)
df
eventos <- 0:10
probs <- dpois(x = eventos, lambda = 3)
prob_acumulada <- ppois(q = eventos, lambda = 3, lower.tail = TRUE)
df <- data.frame(eventos, probs, prob_acumulada)
df
# Sem probabilidade acumulada
ggplot(df, aes(x = factor(eventos), y = probs)) +
geom_col() +
geom_text(aes(label = round(probs,2), y = probs + 0.01), position = position_dodge(0.9), size = 3, vjust = 0) +
labs(title = "Distribuição Poisson Para Calcular a Probabilidade de Vendas Por Semana",
x = "Evento (Número de Vendas)",
y = "Probabilidade")
# Com probabilidade acumulada
ggplot(df, aes(x = factor(eventos), y = probs)) +
geom_col() +
geom_text(aes(label = round(probs,2), y = probs + 0.01), position = position_dodge(0.9), size = 3, vjust = 0) +
labs(title = "Distribuição Poisson Para Calcular a Probabilidade de Vendas Por Semana",
x = "Evento (Número de Vendas)",
y = "Probabilidade") +
geom_line(data = df, aes(x = eventos, y = prob_acumulada))
